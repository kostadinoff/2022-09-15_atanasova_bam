# Chunk 1
#| include: false
#| warning: false
library(here)
here::i_am("2022-09-15_atanasova_bam/analysis/atanasova_analysis.qmd")
WD <- getwd()
if (!is.null(WD))
setwd(WD)
# Chunk 2
#| include: false
#| warning: false
#tables
library(flextable)
library(gtsummary)
library(gt)
library(furniture)
library(finalfit)
#ggplot extra
library(ggthemes)
library(showtext)
library(ggeffects)
library(patchwork)
library(scales)
library(sysfonts)
library(ggsci)
library(ggridges)
#stats
library(tidymodels)
library(marginaleffects)
library(rstatix)
library(jtools)
library(statsExpressions)
library(tidyverse)
library(lubridate)
library(easystats)
library(tidyquant)
library(broom)
library(showtext)
library(janitor)
library(emmeans)
library(survival)
library(survminer)
# Chunk 3
#| include: false
#| warning: false
knitr::opts_chunk$set(dev = "cairo_pdf")
ggplot2::theme_set(
ggthemes::theme_tufte(
base_size = 14,
base_family = "Cormorant Infant",
ticks = FALSE))
#font_add(family = "Cormorant Infant", regular = "Cormorantinfant-regular.ttf")
#showtext_auto()
# Chunk 4
#| include: false
#| warning: false
dat = read_rds(here::here("2022-09-15_atanasova_bam", "data", "dat.rds"))
dat_all = read_rds(here::here("2022-09-15_atanasova_bam", "data", "all_patients.rds"))
dat_gr = read_rds(here::here("2022-09-15_atanasova_bam", "data", "dat_gr.rds"))
# Chunk 5
#| include: false
#| warning: false
round_df <- function(x, digits) {
# round all numeric variables
# x: data frame
# digits: number of digits to round
numeric_columns <- sapply(x, mode) == 'numeric'
x[numeric_columns] <-  round(x[numeric_columns], digits)
x
}
# Chunk 6: tbl-representiv
#| tbl-cap: "Репрезентативност на извадката - сравнение между пациентите със секвенирани проби и всички останали преминали пациенти за периода"
#| cap-location: margin
#| label: tbl-representiv
#| echo: false
#| warning: false
dat_gr %>%
mutate(`Изход` = as_factor(if_else(
outocome == "Починал", "Починал", "Възстановен"
)),
days_hospital = as.numeric(days_hospital)) %>%
group_by(sample) %>%
table1(
sex,
`Изход`,
age,
days_hospital,
days_to_death,
na.rm = FALSE,
test = TRUE,
type = c("simple", "condensed"),
second = c("age","days_hospital", "days_to_death")
) %>%
as_tibble() %>%
mutate(" " = c("Характеристика", "Пол: Мъж", "Леталитет","Възраст \n[Median (IQR)]", "Хоспитализация \n[Median (IQR)]", "Дни до смърта \n[Median (IQR)]" )) %>%
select(` `,all_patients, sample, P.Value) %>%
rename(
"Хоспитализирани" =  "all_patients",
"Секвенирани" = "sample",
"p" =  P.Value
) %>%
knitr::kable()
# Chunk 7: dinamics
#| label: dinamics
#| fig-cap: "По хоризонтала - времето (седмици), с черна линия - 14- дневен среден брой (moving averages) на хоспитализираните случаи, с червена линия - 14- дневен среден брой (moving averages) на починалите, със синя линия- болничния леталитет на седмична база"
#| warning: false
#| echo: false
#| column: page-right
#| fig-width: 7
#| fig-height: 4
# скалиращ фактор за наличие на две у оси
scaleFactor <- 25 / 76.47059
# подготовка на данни
dat_all %>%
count(admit_day, outocome) %>%
pivot_wider(names_from = outocome, values_from = n) %>%
select(-`NA`) %>%
mutate(total = `За домашно лечение` + `Починал`,
dplyr::across(where(is.numeric), ~ replace(., is.na(.), 0))) %>%
rename(deaths = `Починал`) %>%
select(-`За домашно лечение`) %>%
# хитра функция с групиране по седмици и месеци и нова колона от средните
group_by(yw = paste(year(admit_day), week(admit_day))) %>%
mutate(case_fatality = mean(deaths / mean(total)) * 100) %>%
ungroup() %>%
# Плот
ggplot(aes(x = admit_day, group = 1)) +
# За Хоспитализирани
geom_line(
aes(y = total, group = 1),
alpha = 0.3,
size = 0.1,
lty = 2,
color = "black"
) +
geom_ma(
aes(y = total, group = 1),
ma_fun = SMA,
n = 14,
alpha = 1,
size = 0.6,
lty = 1,
color = "black"
) +
geom_point(
aes(y = total, group = 1),
alpha = 0.2,
size = 0.2,
color = "black"
) +
# За Починали
geom_line(
aes(y = deaths, group = 1),
alpha = 0.3,
size = 0.1,
colour = "red",
lty = 2
) +
geom_ma(
aes(y = deaths, group = 1),
ma_fun = SMA,
n = 14,
alpha = 1,
size = 0.6,
colour = "red",
lty = 1
) +
geom_point(
aes(y = deaths, group = 1),
alpha = 0.2,
size = 0.2,
colour = "red"
) +
# За Леталитета
geom_smooth(
aes(y = case_fatality * scaleFactor, group = 1),
se = F,
colour = "blue",
lty = 2,
size = 0.8
) +
# За двете оси
scale_y_continuous(name = "Брой (n)",
sec.axis = sec_axis(~ . / scaleFactor, name = "Леталитет (%)")) +
theme(axis.text.x = element_text(
angle = 90,
vjust = 0.5,
hjust = 1
)) +
# Ръгчетата по х оста
ggthemes::geom_rangeframe(aes(x = admit_day, group = 1)) +
coord_cartesian(clip = "off") +
geom_rug(aes(x = admit_day),
alpha = 0.3,
size = 0.3 ,
sides = "b") +
scale_x_date(date_labels = "%b %y", date_breaks  = "1 month") +
labs(title = "Динамика в броя хоспитализациите, \nсмъртните случаи и леталитета",
x = "")
# Chunk 8: variant_dinamics
#| label: variant_dinamics
#| fig-cap: "Динамика на вариантите по седмица"
#| column: page-right
#| fig-height: 5
#| warning: false
#| echo: false
dat %>%
count(variant_type, wmy) %>%
na.omit() %>%
ggplot(aes(n, wmy, fill = variant_type)) +
geom_col() +
facet_wrap( ~ variant_type) +
theme(legend.position = "none") +
scale_fill_nejm() +
labs(title = "Динамика на вариантите по седмица ",
x = "Брой проби",
y = "")
# Chunk 9
#| include: false
results_data_death = dat_all %>%
contingency_table(outocome,my)
# Chunk 10
#| include: false
fill_dat = dat %>%
freq_table(my, variant_type) %>%
select(-n) %>%
pivot_wider(names_from = variant_type, values_from = prop) %>%
select(my, Delta) %>%
mutate(Delta = replace_na(Delta, 0)) %>%
rename(delta_prob = Delta)
# Chunk 11: case_fatality
#| label: case_fatality
#| fig-cap: "Разпределение на леталитета по месеци и спрямо разпространението на делта ваиранта. Вътреболничния леталитет е изчислен като са разделени броя на починалите към броя на хоспитализираните в съответния месец. Леталитетът е представен в проценти. В случая става върпрос за *crude* или нестандартиризиран леталитет"
#| warning: false
#| echo: false
#| cap-location: margin
dat_all %>%
count(my, outocome) %>%
pivot_wider(names_from = outocome, values_from = n) %>%
select(-`NA`) %>%
mutate(total = `За домашно лечение` + `Починал`,
across(where(is.numeric), ~ replace(., is.na(.), 0))) %>%
rename(deaths = `Починал`) %>%
select(-`За домашно лечение`) %>%
mutate(case_fatality = (deaths / total),
across(where(is.numeric), ~ replace(., is.na(.), 0))) %>%
left_join(fill_dat) %>%
#ggplot
ggplot(aes(case_fatality, my, fill = delta_prob)) +
geom_col() +
scale_fill_gradient(low = "#008F7A",
high = "#845EC2",
na.value = NA) +
geom_vline(
xintercept = 0.253,
lty = 2,
size = 0.8,
alpha = 1.1
) +
scale_x_continuous(labels = scales::percent) +
#ggthemes::geom_rangeframe() +
#geom_rug(alpha = 0.6,sides="r")+
labs(
title = "Разпределние на вътреболничния леталитет",
subtitle = parse(text = results_data_death$expression),
x = "Вътреболничен леталитет",
y = "",
fill = "% Делта вариант"
) +
theme(plot.subtitle = element_text(size = 12))
# Chunk 12
#| include: false
delta_rate = dat %>%
freq_table(my, variant_type) %>%
select(-prop) %>%
pivot_wider(names_from = variant_type, values_from = n) %>%
select(my, Delta) %>%
mutate(Delta = replace_na(Delta, 0),
delta_rate = (Delta - lag(Delta)) / lag(Delta)) %>%
select(-Delta)
# Chunk 13: case_fatality_dynamics
#| label: case_fatality_dynamics
#| fig-cap: "Верижния индекс на болничния леталитет е конструиран, като за всеки месец е изчислена разликата в броя на починалите спрямо предходния, разделяна на броя на хоспитализираните в предходния месец"
#| warning: false
#| echo: false
#| cap-location: margin
dat_all %>%
count(my, outocome) %>%
pivot_wider(names_from = outocome, values_from = n) %>%
select(-`NA`) %>%
mutate(total = `За домашно лечение` + `Починал`,
across(where(is.numeric), ~replace(., is.na(.), 0))) %>%
rename(deaths = `Починал`) %>%
select(- `За домашно лечение`) %>%
mutate(rate = (deaths-lag(deaths))/lag(total),
my = as_factor(my)) %>%
ggplot(aes(rate, my)) +
geom_col()+
geom_vline(xintercept = 0, lty=1, size = 1,1, alpha = 1.1)+
scale_x_continuous(labels = scales::percent)+
#ggthemes::geom_rangeframe() +
coord_cartesian(clip="off") +
#geom_rug(alpha = 0.6,sides="r")+
labs(title = "Индекс болничния леталитет",
x = "Индекс (%)",
y = "")
# Chunk 14
#| include: false
dat_all = dat_all %>%
mutate(
# Create categories
age_group = dplyr::case_when(
age <= 14            ~ "0-14",
age > 14 & age <= 44 ~ "15-44",
age > 44 & age <= 64 ~ "45-64",
age > 64             ~ "> 64"
),
# Convert to factor
age_group = factor(age_group,
level = c("0-14", "15-44", "45-64", "> 64"))
) %>%
mutate(death = as_factor(if_else(outocome == "Починал", 1, 0)))
death_mod = glm(death ~ age * factor(sex),
family = binomial(link = "logit"),
data = dat_all)
dat_all_mod = augment_columns(death_mod,
dat_all,
type.predict = "response")
# Chunk 15: tbl-death_age_sex
#| tbl-cap: "Разпределние на починалите по възрастови групи и пол"
#| cap-location: margin
#| label: tbl-death_age_sex
#| echo: false
#| warning: false
dat_all %>%
count(age_group, sex, outocome) %>%
pivot_wider(names_from = outocome,
values_from = n) %>%
select(-`NA`) %>%
mutate(case_fatality = percent(Починал / (`За домашно лечение` + Починал))) %>%
select(age_group, sex, case_fatality) %>%
left_join(
dat_all %>%
count(age_group, sex) %>%
pivot_wider(values_from = n, names_from = sex) %>%
mutate(
proportion_f = percent(Жена / sum(Жена)),
proportion_m = percent(Мъж / sum(Мъж))
) %>%
pivot_longer(
cols = 4:5,
names_to = "gender",
values_to = "% от всички"
) %>%
select(-c(Жена, Мъж)) %>%
mutate(sex = if_else(str_detect(gender, "_f"), "Жена", "Мъж")) %>%
select(age_group, sex, "% от всички")
) %>%
rename(`Възрастова група` = age_group,
`Пол` = sex,
`Леталитет` = case_fatality) %>%
knitr::kable()
# Chunk 16: case_fatality by sex and age
#| label: case_fatality by sex and age
#| fig-cap:  Вътреболничен леталитет спрямо пола и вързрастта. С розово- динамиката леталитета спрямо възрастта при жените, в синьо - при мъжете "
#| warning: false
#| echo: false
#| cap-location: margin
dat_all_mod  %>%
rename(predicted = .fitted) %>%
mutate(lower = predicted - 1.96 * .se.fit,
upper = predicted + 1.96 * .se.fit) %>%
ggplot(aes(age, predicted)) +
geom_line(aes (group = sex, color = sex),
size = 1,
alpha = 0.8) +
geom_ribbon(aes(group = sex,
fill = sex,
ymin = lower,
ymax = upper), alpha = 0.3) +
ggthemes::geom_rangeframe() +
coord_cartesian(clip = "off") +
geom_rug(aes(x = age), alpha = 0.2, size = 0.4) +
scale_y_continuous(labels = scales::percent) +
theme(legend.position = "none")+
labs(title = "Леталитет спрямо възрастта и пола",
x = "Възраст",
y = "Вътреболничен леталитет")
# Chunk 17
#| include: false
results_data = corr_test(dat_all,days_hospital, age, type = "parametric")
